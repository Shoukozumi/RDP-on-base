'use client'

import { useState, useEffect } from 'react'
import Sidebar from "@/app/sidebar"
import Link from "next/link";

// Simulated workflow data
const testWorkflows = [
    {
        id: 1,
        title: "Customer Loyalty Rewards",
        description: "Automatically send rewards to customers based on their purchase history",
        triggers: 150,
        priceSum: 750,
        actions: 3,
        pricePerWorkflow: 5,
        isActive: true,
    },
    {
        id: 2,
        title: "New Product Launch",
        description: "Notify subscribers and create special offers for new product releases",
        triggers: 50,
        priceSum: 250,
        actions: 2,
        pricePerWorkflow: 5,
        isActive: true,
    },
    {
        id: 3,
        title: "Abandoned Cart Recovery",
        description: "Send reminders and offers to customers who abandoned their shopping carts",
        triggers: 200,
        priceSum: 600,
        actions: 2,
        pricePerWorkflow: 3,
        isActive: false,
    },
]

export default function Workflows() {
    const [workflows, setWorkflows] = useState([])
    const [searchTerm, setSearchTerm] = useState('')
    const [isLoading, setIsLoading] = useState(true)

    useEffect(() => {
        // Simulated API call
        const fetchWorkflows = async () => {
            setIsLoading(true)
            try {
                // Simulate network delay
                await new Promise(resolve => setTimeout(resolve, 1000))
                setWorkflows(testWorkflows)
            } catch (error) {
                console.error("Error fetching workflows:", error)
            } finally {
                setIsLoading(false)
            }
        }

        fetchWorkflows()
    }, [])

    const filteredWorkflows = workflows.filter(workflow =>
        workflow.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
        workflow.description.toLowerCase().includes(searchTerm.toLowerCase())
    )

    const handleManualTrigger = (id) => {
        console.log(`Manually triggered workflow ${id}`)
        // Add your manual trigger logic here
        // TODO: Add manual trigger fake logic to show a fake modal waiting for confirmation for 5 seconds
    }

    const handleToggleWorkflow = (id) => {
        // @ts-ignore
        setWorkflows(workflows.map(workflow =>
            workflow.id === id ? { ...workflow, isActive: !workflow.isActive } : workflow
        ))
    }

    const handleViewDetails = (id) => {
        console.log(`Viewing details of workflow ${id}`)
        // Add your view details logic here, e.g., navigate to a detailed view
    }

    return (
        <div className="drawer lg:drawer-open">
            <input id="my-drawer-2" type="checkbox" className="drawer-toggle" />
            <div className="drawer-content flex flex-col">
                <div className="navbar bg-base-100">
                    <div className="flex-1">
                        <a className="btn btn-ghost normal-case text-xl">Workflows</a>
                    </div>
                    <div className="flex-none gap-2">
                        <div className="form-control">
                            <input
                                type="text"
                                placeholder="Search workflows"
                                className="input input-bordered w-24 md:w-auto"
                                value={searchTerm}
                                onChange={(e) => setSearchTerm(e.target.value)}
                            />
                        </div>
                    </div>
                </div>

                <main className="p-6">
                    {isLoading ? (
                        <div className="flex justify-center items-center h-64">
                            <span className="loading loading-spinner loading-lg"></span>
                        </div>
                    ) : (
                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                            <div className="card bg-base-100 shadow-xl">
                                <div className="card-body flex flex-col justify-center items-center">
                                    <h2 className="card-title text-2xl mb-4">Add a Workflow</h2>
                                    <Link href="/create-workflow">
                                    <button className="btn btn-primary btn-lg">
                                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6 mr-2">
                                            <path strokeLinecap="round" strokeLinejoin="round" d="M12 4.5v15m7.5-7.5h-15" />
                                        </svg>
                                        Create Workflow
                                    </button>
                                    </Link>
                                </div>
                            </div>

                            {filteredWorkflows.map(workflow => (
                                <div key={workflow.id} className="card bg-base-100 shadow-xl">
                                    <div className="card-body">
                                        <h2 className="card-title">{workflow.title}</h2>
                                        <div className="grid grid-cols-2 gap-4 my-4">
                                            <div className="text-center">
                                                <div className="stat-value">{workflow.triggers}</div>
                                                <div className="stat-desc">Triggers</div>
                                            </div>
                                            <div className="text-center">
                                                <div className="stat-value">${workflow.priceSum}</div>
                                                <div className="stat-desc">Total spending</div>
                                            </div>
                                            <div className="text-center">
                                                <div className="stat-value">${workflow.pricePerWorkflow}</div>
                                                <div className="stat-desc">Price per Trigger</div>
                                            </div>
                                            <div className="text-center">
                                                <div className="stat-value">{workflow.actions}</div>
                                                <div className="stat-desc">Actions</div>
                                            </div>
                                        </div>
                                        <p>{workflow.description}</p>
                                        <div className="card-actions justify-end mt-4">
                                            <button className="btn btn-primary"
                                                    onClick={() => handleManualTrigger(workflow.id)}>Manual Trigger</button>
                                            <button
                                                className={`btn ${workflow.isActive ? 'btn-error' : 'btn-success'}`}
                                                onClick={() => handleToggleWorkflow(workflow.id)}
                                            >
                                                {workflow.isActive ? 'Turn Off' : 'Turn On'}
                                            </button>
                                            <button className="btn btn-ghost" onClick={() => handleViewDetails(workflow.id)}>View Details</button>
                                        </div>
                                    </div>
                                </div>
                            ))}
                        </div>
                    )}
                </main>
            </div>

            <Sidebar />
        </div>
    )
}


